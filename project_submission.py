# -*- coding: utf-8 -*-
"""Project_Submission.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Cw_CHtoDptBiBWUZk6pPsF63_2-tZazs
"""



"""# Task
Create a Streamlit application for language translation with text-to-speech functionality. The application should allow users to upload files (PDF, TXT, EXCEL, CSV), extract text from them, translate the text, convert the translated text to speech using `gtts`, and provide a download option for the audio file. The application should use the libraries listed in the `requirements.txt` file: `streamlit`, `google-generativeai`, `python-dotenv`, `langchain`, `PyPDF2`, `chromadb`, and `gtts`.

## Setup

### Subtask:
Create a `requirements.txt` file with the specified libraries and a `.env` file to store the Google API key.

**Reasoning**:
Create the `requirements.txt` and `.env` files with the specified content.
"""



"""## Install libraries

### Subtask:
Install the required libraries using `pip`.

**Reasoning**:
Install the required libraries using pip from the requirements.txt file.
"""



"""## Streamlit application structure

### Subtask:
Create the basic structure of the Streamlit application.

**Reasoning**:
Create a basic Streamlit application structure by importing streamlit, setting the title, and adding introductory text as per the instructions.

# Task
Develop a Streamlit application for language translation with the following features:
- Allow users to upload files (PDF, TXT, EXCEL, CSV) or enter text directly.
- Translate the text using the `google-generativeai` and `langchain` libraries.
- Provide text-to-speech functionality for the translated text using the `gtts` library.
- Allow users to download the generated audio file.
- Use the libraries specified in the `requirements.txt` file: `streamlit`, `google-generativeai`, `python-dotenv`, `langchain`, `PyPDF2`, `chromadb`, `gtts`.

## Streamlit application structure

### Subtask:
Create the basic structure of the Streamlit application.

**Reasoning**:
Create a basic Streamlit application structure by importing streamlit, setting the title, and adding introductory text as per the instructions.
"""

import streamlit as st

st.title("Language Translation with Text-to-Speech")
st.write("This application allows you to translate text from uploaded files or direct input and convert the translated text to speech.")

"""## Input option

### Subtask:
Implement an option for users to either upload a file or enter text directly for translation.

**Reasoning**:
Implement the input method selection and corresponding input fields using Streamlit components as described in the instructions.
"""

input_method = st.radio("Choose input method", ("Upload a file", "Enter text directly"))

uploaded_file = None
input_text = ""

if input_method == "Upload a file":
    uploaded_file = st.file_uploader("Upload a file", type=['pdf', 'txt', 'xlsx', 'xls', 'csv'])
elif input_method == "Enter text directly":
    input_text = st.text_area("Enter text here:")

"""## Text extraction

### Subtask:
Extract text content from the uploaded files based on their format.

**Reasoning**:
Define a function to extract text from uploaded files based on their type using pandas and PyPDF2 and include error handling.

# Task
Develop a Streamlit application for language translation with text-to-speech functionality. The application should allow users to either upload a file (PDF, TXT, EXCEL, CSV) or enter text directly for translation. Use the following libraries: `streamlit`, `google-generativeai`, `python-dotenv`, `langchain`, `PyPDF2`, `chromadb`, and `gtts`. The application should provide an option to download the generated audio file.

## Text extraction

### Subtask:
Extract text content from the uploaded files based on their format, using `PyPDF2` for PDF files.

**Reasoning**:
Define the function to extract text from different file types using the specified libraries and error handling.
"""

import pandas as pd
import PyPDF2
import io

def extract_text_from_file(uploaded_file):
    """Extracts text content from uploaded files."""
    if uploaded_file is not None:
        file_extension = uploaded_file.name.split('.')[-1].lower()

        try:
            if file_extension == 'pdf':
                reader = PyPDF2.PdfReader(uploaded_file)
                text = ""
                for page_num in range(len(reader.pages)):
                    text += reader.pages[page_num].extract_text()
                return text
            elif file_extension == 'txt':
                return uploaded_file.getvalue().decode("utf-8")
            elif file_extension in ['xlsx', 'xls']:
                df = pd.read_excel(uploaded_file)
                return df.to_string()
            elif file_extension == 'csv':
                df = pd.read_csv(uploaded_file)
                return df.to_string()
            else:
                return "Unsupported file type."
        except Exception as e:
            return f"Error processing file: {e}"
    return ""

"""## Language translation

### Subtask:
Implement the language translation functionality using the `google-generativeai` and `langchain` libraries.

**Reasoning**:
Implement the language translation functionality by loading the API key, initializing the generative model, creating a translation prompt, and defining a function to translate text using the model and prompt.

# Task
Develop a Streamlit application for language translation with the following features:
- Use the libraries specified in the `requirements.txt` file: `streamlit`, `google-generativeai`, `python-dotenv`, `langchain`, `PyPDF2`, `chromadb`, `gtts`.
- Allow users to upload files in PDF, TXT, EXCEL, and CSV formats for translation.
- Provide an option for users to enter text directly for translation.
- Allow users to select the target language from a dropdown menu.
- Implement text-to-speech functionality for the translated text using the `gtts` library.
- Provide an option for users to download the generated audio file.

## Target language selection

### Subtask:
Add a dropdown menu for the user to select the target language for translation.

**Reasoning**:
Add a selectbox for target language selection to the Streamlit application.
"""

target_languages = ["English", "Spanish", "French", "German", "Chinese"]
target_language = st.selectbox("Select Target Language", target_languages)

"""## Language translation

### Subtask:
Implement the language translation functionality using the `google-generativeai` and `langchain` libraries, using the selected target language.

**Reasoning**:
Implement the language translation functionality by loading the API key, initializing the generative model, creating a translation prompt, and defining a function to translate text using the model and prompt.
"""

import os
from dotenv import load_dotenv
import google.generativeai as genai
from langchain_core.prompts import PromptTemplate
from langchain.chains import LLMChain
from langchain_google_genai import GoogleGenerativeAI

load_dotenv()
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
genai.configure(api_key=GOOGLE_API_KEY)

translation_template = """Translate the following text into {target_language}:

{text}
"""
translation_prompt = PromptTemplate(
    input_variables=["text", "target_language"],
    template=translation_template,
)

llm = GoogleGenerativeAI(model="gemini-pro", temperature=0.3)

translation_chain = LLMChain(llm=llm, prompt=translation_prompt)

def translate_text(text: str, target_language: str) -> str:
    """Translates the input text to the target language."""
    translated_text = translation_chain.invoke({"text": text, "target_language": target_language})
    return translated_text['text']

"""**Reasoning**:
The previous command failed because the `langchain_google_genai` module was not found. I need to install the required package and then re-execute the code to define the translation function.

## Text-to-Speech

### Subtask:
Implement the text-to-speech functionality using the `gtts` library, using the translated text.

**Reasoning**:
Define a function to convert the translated text to speech using the `gtts` library and handle potential errors.
"""

from gtts import gTTS
import io

def text_to_speech(text: str, lang: str) -> bytes:
    """Converts text to speech using gTTS."""
    try:
        tts = gTTS(text=text, lang=lang, slow=False)
        audio_bytes = io.BytesIO()
        tts.write_to_fp(audio_bytes)
        return audio_bytes.getvalue()
    except Exception as e:
        st.error(f"Error during text-to-speech conversion: {e}")
        return None

"""## Integrate Components

### Subtask:
Integrate all the components (input option, file upload, text extraction, translation, text-to-speech, and audio download) into the Streamlit application.

**Reasoning**:
Combine the previously defined functions and Streamlit components to create the complete application logic, including handling user input, processing, translation, text-to-speech conversion, and providing an audio download option.
"""

# Check if either a file is uploaded or text is entered
processed_text = ""
if input_method == "Upload a file" and uploaded_file is not None:
    processed_text = extract_text_from_file(uploaded_file)
elif input_method == "Enter text directly" and input_text:
    processed_text = input_text

translated_text = ""
audio_bytes = None

if processed_text:
    st.subheader("Original Text")
    st.write(processed_text)

    st.subheader("Translated Text")
    # Assuming target_language is already defined from the selectbox
    translated_text = translate_text(processed_text, target_language)
    st.write(translated_text)

    if translated_text:
        # Convert the target language name to a language code for gTTS
        # This is a simplified mapping, you might need a more comprehensive one
        lang_code_map = {
            "English": "en",
            "Spanish": "es",
            "French": "fr",
            "German": "de",
            "Chinese": "zh-CN" # Example, adjust as needed
        }
        target_lang_code = lang_code_map.get(target_language, "en") # Default to English

        audio_bytes = text_to_speech(translated_text, target_lang_code)

        if audio_bytes:
            st.subheader("Audio Playback")
            st.audio(audio_bytes, format="audio/mp3")

            st.subheader("Download Audio")
            st.download_button(
                label="Download Audio",
                data=audio_bytes,
                file_name="translated_audio.mp3",
                mime="audio/mp3"
            )

"""## Set up ngrok for testing

### Subtask:
Install `pyngrok` and set up the ngrok authtoken.

**Reasoning**:
Install the `pyngrok` library to interface with ngrok and use the provided authtoken to authenticate the ngrok service.
"""

# This cell is no longer needed as ngrok dependencies are being removed.
# To run the Streamlit app, save the code to a .py file and run with `streamlit run your_app.py` in a terminal.

"""## Run Streamlit with ngrok

### Subtask:
Provide instructions and code to run the Streamlit application and expose it via ngrok.

**Reasoning**:
Explain how to save the Streamlit code to a file, run it, and then use `pyngrok` to create a public URL for the running application.

Now that ngrok is set up, follow these steps to run your Streamlit app and access it via a public URL:

1.  **Save your Streamlit app code:** Copy all the code you've written for your Streamlit application into a single Python file named `app.py`. You can do this by manually copying the code from the relevant cells or by downloading the notebook as a Python file and cleaning it up.

2.  **Run the Streamlit app in the background:** Open a new terminal in Colab (Ctrl+Shift+T or go to `Terminal > New terminal`). Navigate to the directory where you saved `app.py` and run the following command:
"""

# This cell is no longer needed as ngrok dependencies are being removed.
# To run the Streamlit app, save the code to a .py file and run with `streamlit run your_app.py` in a terminal.



"""4.  **To stop the ngrok tunnel and the Streamlit app:** Execute the following cell to disconnect the ngrok tunnel. You will also need to stop the Streamlit process running in the background in the terminal (you might need to find its process ID and use `kill` or simply close the terminal). Alternatively, you can try using `!pkill streamlit` in a code cell to stop the Streamlit process."""

# This cell is no longer needed as ngrok dependencies are being removed.
# To run the Streamlit app, save the code to a .py file and run with `streamlit run your_app.py` in a terminal.

"""## Run the Application

### Subtask:
Provide instructions on how to run the Streamlit application.

**Reasoning**:
Explain how to save the application code as a Python file and run it from the terminal using the `streamlit run` command.

To run this Streamlit application:

1. Save the code from the relevant cells into a Python file (e.g., `app.py`).
2. Open a terminal or command prompt.
3. Navigate to the directory where you saved the file.
4. Run the command: `streamlit run app.py`

## Run the Application

### Subtask:
Provide instructions on how to run the Streamlit application.

**Reasoning**:
Explain how to save the application code as a Python file and run it from the terminal using the `streamlit run` command.

4.  **To stop the Streamlit app:** You will need to stop the Streamlit process running in the background in the terminal (you might need to find its process ID and use `kill` or simply close the terminal). Alternatively, you can try using `!pkill streamlit` in a code cell to stop the Streamlit process.
"""